package stoplight

import "fmt"

// AUTOMATICALLY GENERATED by test go
// DO NOT EDIT
// Original .statecraft file contents included at bottom.

type System interface {
}

// states
type State string
const (
    Red State = "Red" // Red
    Yellow State = "Yellow" // Yellow
    Green State = "Green" // Green
)

// events
type Event string
const (
    
    Timer Event = "Timer"
)

type Transition struct {
    Src    State
    Event  Event
	Method func()
	Dst    State
}

type Transitions map[Event]Transition

type Graph map[State]Transitions

type Machine struct {
    g Graph
    sys System
    State State
}

func New(sys System, initState State) (m *Machine) {
    m = &Machine{
        sys: sys,
        State: initState,
    }
    m.g = Graph{
        State("Red"):  Transitions{
            Event("Timer"): Transition{
                    Dst: State("Green"),
            },
        },
        State("Yellow"):  Transitions{
            Event("Timer"): Transition{
                    Dst: State("Red"),
            },
        },
        State("Green"):  Transitions{
            Event("Timer"): Transition{
                    Dst: State("Yellow"),
            },
        },
    }
    return
}

func (m *Machine) Tick(event Event) (newState State, err error) {
    src := m.g[m.State]
    t, ok := src[event]
    if !ok {
        err = fmt.Errorf("unhandled: state %s event %s", string(m.State), string(event))
        return
    }
    m.State = t.Dst
    if t.Method != nil {
        t.Method()
    }
    return m.State, nil
}

var txt string = `
// Comments look like this.  We ignore blank lines.

// Declare Go package and state machine name.

package stoplight
machine Stoplight

// Declare states with an 's' followed by the state node description.
// - the first word of the description is used as the state node name 
// - the state name must be unique

s Red
s Yellow
s Green

// Declare transitions with a 't' followed by the source state, event
// name, and destination state.  Declare an optional transition method
// name as part of the event name, after a slash.
// Regular expressions can be used as wildcards in the source name.
// The first matching rule will be used.

t Red Timer Green
t Green Timer Yellow
t Yellow Timer Red

` 
