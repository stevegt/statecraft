# AUTOMATICALLY GENERATED by {{ .Cmdline }}
# DO NOT EDIT
# Original .statecraft file contents included at bottom.

# States
class State:
    def __init__(self, name, label):
        self.name = name
        self.label = label
        
    def __str__(self):
        return self.name

    def label(self):
        return self.label
        
{{- range $s := .LsStates }}
{{ $s.Name }} = State("{{ $s.Name }}", "{{ $s.Label }}")
{{- end}}

# Events
class Event:
    def __init__(self, name):
        self.name = name

    def __str__(self):
        return self.name
        
{{- range $e := .EventNames}}
{{ $e }} = Event("{{ $e }}")
{{- end}}

# Transition
class Transition:
    def __init__(self, src, event, method, dst):
        self.src = src
        self.event = event
        self.method = method
        self.dst = dst

# Machine
class Machine:

    def __init__(self, handlers, state):
        self.state = state
        self.g = {}
        {{- range $s := .LsStates }}
        self.g["{{ $s.Name }}"] = {}
        {{- range $e, $t := $s.Transitions }}
        self.g["{{ $s.Name }}"]["{{ $e }}"] = Transition(
            {{ $t.Src }},
            {{ $t.Event }},
            {{- if $t.Method }}
            handlers.{{ $t.Method }},
            {{- else}}
            None,
            {{- end}}
            {{ $t.Dst }}
        )
        {{- end}}
        {{- end}}

    def tick(self, event):
        if event.name not in self.g[self.state.name]:
            raise Exception(f'unhandled: state {self.state} event {event}')
        t = self.g[self.state.name][event.name]
        self.state = t.dst
        if t.method is not None:
            t.method()
        return self.state

'''
{{ .Txt }}
'''

