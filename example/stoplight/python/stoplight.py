# AUTOMATICALLY GENERATED by ../..//statecraft stoplight.statecraft python/stoplight.py
# DO NOT EDIT
# Original .statecraft file contents included at bottom.

# States
class State:
    def __init__(self, name, label):
        self.name = name
        self.label = label
        
    def __str__(self):
        return self.name

    def label(self):
        return self.label
Red = State("Red", "Red")
Yellow = State("Yellow", "Yellow")
Green = State("Green", "Green")

# Events
class Event:
    def __init__(self, name):
        self.name = name

    def __str__(self):
        return self.name
Timer = Event("Timer")

# Transition
class Transition:
    def __init__(self, src, event, method, dst):
        self.src = src
        self.event = event
        self.method = method
        self.dst = dst

# Machine
class Machine:

    def __init__(self, handlers, state):
        self.state = state
        self.g = {}
        self.g["Red"] = {}
        self.g["Red"]["Timer"] = Transition(
            Red,
            Timer,
            None,
            Green
        )
        self.g["Yellow"] = {}
        self.g["Yellow"]["Timer"] = Transition(
            Yellow,
            Timer,
            None,
            Red
        )
        self.g["Green"] = {}
        self.g["Green"]["Timer"] = Transition(
            Green,
            Timer,
            None,
            Yellow
        )

    def tick(self, event):
        if event.name not in self.g[self.state.name]:
            raise Exception(f'unhandled: state {self.state} event {event}')
        t = self.g[self.state.name][event.name]
        self.state = t.dst
        if t.method is not None:
            t.method()
        return self.state

'''
// Comments look like this.  We ignore blank lines.

// Declare Go package and state machine name.

package stoplight

// Declare states with an 's' followed by the state node description.
// - the first word of the description is used as the state node name 
// - the state name must be unique

s Red
s Yellow
s Green

// Declare transitions with a 't' followed by the source state, event
// name, and destination state.  Declare an optional transition method
// name as part of the event name, after a slash.
// Regular expressions can be used as wildcards in the source name.
// The first matching rule will be used.

t Red Timer Green
t Green Timer Yellow
t Yellow Timer Red

'''

