package car

import "fmt"

// AUTOMATICALLY GENERATED by ../../statecraft car/car.statecraft car/car.go
// DO NOT EDIT
// Original .statecraft file contents included at bottom.

type handlers interface {
    Gas()
    Brake()
    Decide()
}

// states
type State struct {
    name string
    label string
}

func (s State) String() string {
    return s.name    
}

func (s State) Label() string {
    return s.label    
}

var (
    Stopped = State{"Stopped", "Stopped at red light"}
    Deciding = State{"Deciding", "Deciding whether to stop"}
    Going = State{"Going", "Going through light"}
    Beyond = State{"Beyond", "Beyond light already"}
)

// events
type Event struct {
    name string
}

func (e Event) String() string {
    return e.name    
}

var (
    
    Green = Event{"Green"}
    Stop = Event{"Stop"}
    Go = Event{"Go"}
    Red = Event{"Red"}
    Yellow = Event{"Yellow"}
)

type transition struct {
    Src    State
    Event  Event
	Method func()
	Dst    State
}

type transitions map[Event]transition

type graph map[State]transitions

type Machine struct {
    g graph
    State State
}

func New(h handlers, initState State) (m *Machine) {
    m = &Machine{
        State: initState,
    }
    m.g = graph{
        Stopped:  transitions{
            Go: transition{
                    Dst: Going, 
                    Method: h.Gas, 
            },
            Green: transition{
                    Dst: Going, 
                    Method: h.Gas, 
            },
            Red: transition{
                    Dst: Stopped, 
                    Method: h.Brake, 
            },
            Stop: transition{
                    Dst: Stopped, 
                    Method: h.Brake, 
            },
            Yellow: transition{
                    Dst: Deciding, 
                    Method: h.Decide, 
            },
        },
        Deciding:  transitions{
            Go: transition{
                    Dst: Going, 
                    Method: h.Gas, 
            },
            Green: transition{
                    Dst: Going, 
                    Method: h.Gas, 
            },
            Red: transition{
                    Dst: Stopped, 
                    Method: h.Brake, 
            },
            Stop: transition{
                    Dst: Stopped, 
                    Method: h.Brake, 
            },
            Yellow: transition{
                    Dst: Deciding, 
                    Method: h.Decide, 
            },
        },
        Going:  transitions{
            Go: transition{
                    Dst: Going, 
                    Method: h.Gas, 
            },
            Green: transition{
                    Dst: Going, 
                    Method: h.Gas, 
            },
            Red: transition{
                    Dst: Beyond, 
                    Method: h.Gas, 
            },
            Stop: transition{
                    Dst: Stopped, 
                    Method: h.Brake, 
            },
            Yellow: transition{
                    Dst: Deciding, 
                    Method: h.Decide, 
            },
        },
        Beyond:  transitions{
            Go: transition{
                    Dst: Going, 
                    Method: h.Gas, 
            },
            Green: transition{
                    Dst: Going, 
                    Method: h.Gas, 
            },
            Red: transition{
                    Dst: Stopped, 
                    Method: h.Brake, 
            },
            Stop: transition{
                    Dst: Stopped, 
                    Method: h.Brake, 
            },
            Yellow: transition{
                    Dst: Deciding, 
                    Method: h.Decide, 
            },
        },
    }
    return
}

func (m *Machine) Tick(event Event) (newState State, err error) {
    src := m.g[m.State]
    t, ok := src[event]
    if !ok {
        err = fmt.Errorf("unhandled: state %s event %s", m.State.String(), event.String())
        return
    }
    m.State = t.Dst
    if t.Method != nil {
        t.Method()
    }
    return m.State, nil
}

var txt string = `
// Comments look like this.  We ignore blank lines.

// Case matters in this file -- the names you provide here are passed
// straight through to the Go code generator as variable and struct
// names. This means that if you generate the .go file in a
// subdirectory as a separate package from your calling code, you'll
// need to uppercase everything here so it will be exported.
// 
// The README and example code assumes that you will be generating the
// .dot and .go files in a subdirectory as a separate package from
// your calling code, so we uppercase everything in this example.
//
// You can instead choose to generate your .go in the same directory
// as the calling code, in which case everything in your .statecraft
// file can be lowercased.
//
// Another consideration is reserved words -- several are used in the
// generated go code, including 'State', 'Event', 'New', 'Machine',
// and 'Tick'.  You will see compiler errors if you use any of these
// words for your own state or event names.

// Declare package name -- this is used verbatim as the 'package' name
// at the top of the generated .go:
package car

// Declare states with an 's' followed by the state node description.
// The first word of the description is used as the state node name.
// Each state name must be unique.

s Stopped at red light
s Deciding whether to stop
s Going through light 
s Beyond light already

// Declare transitions with a 't' followed by the source state, event
// name, and destination state.  Declare an optional transition method
// name as part of the event name, after a slash.
// 
// Regular expressions can be used as wildcards in the source state
// field.  The first matching rule will be used.

t Going Green/Gas Going

t Deciding Stop/Brake Stopped 
t Deciding Go/Gas Going 
t Going Red/Gas Beyond

t .* Red/Brake Stopped 
t .* Yellow/Decide Deciding 
t .* Green/Gas Going
t .* Stop/Brake Stopped
t .* Go/Gas Going

` 
