package stoplight

import "fmt"

// AUTOMATICALLY GENERATED by ../..//statecraft stoplight.statecraft go/stoplight/stoplight.go
// DO NOT EDIT
// Original .statecraft file contents included at bottom.

type handlers interface {
}

// states
type State struct {
    name string
    label string
}

func (s State) String() string {
    return s.name    
}

func (s State) Label() string {
    return s.label    
}

var (
    Red = State{"Red", "Red"}
    Yellow = State{"Yellow", "Yellow"}
    Green = State{"Green", "Green"}
)

// events
type Event struct {
    name string
}

func (e Event) String() string {
    return e.name    
}

var (
    
    Timer = Event{"Timer"}
)

type transition struct {
    Src    State
    Event  Event
	Method func()
	Dst    State
}

type transitions map[Event]transition

type graph map[State]transitions

type Machine struct {
    g graph
    State State
}

func New(h handlers, initState State) (m *Machine) {
    m = &Machine{
        State: initState,
    }
    m.g = graph{
        Red:  transitions{
            Timer: transition{
                    Dst: Green,
            },
        },
        Yellow:  transitions{
            Timer: transition{
                    Dst: Red,
            },
        },
        Green:  transitions{
            Timer: transition{
                    Dst: Yellow,
            },
        },
    }
    return
}

func (m *Machine) Tick(event Event) (newState State, err error) {
    src := m.g[m.State]
    t, ok := src[event]
    if !ok {
        err = fmt.Errorf("unhandled: state %s event %s", m.State.String(), event.String())
        return
    }
    m.State = t.Dst
    if t.Method != nil {
        t.Method()
    }
    return m.State, nil
}

var txt string = `
// Comments look like this.  We ignore blank lines.

// Declare Go package and state machine name.

package stoplight

// Declare states with an 's' followed by the state node description.
// - the first word of the description is used as the state node name 
// - the state name must be unique

s Red
s Yellow
s Green

// Declare transitions with a 't' followed by the source state, event
// name, and destination state.  Declare an optional transition method
// name as part of the event name, after a slash.
// Regular expressions can be used as wildcards in the source name.
// The first matching rule will be used.

t Red Timer Green
t Green Timer Yellow
t Yellow Timer Red

` 
